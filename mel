#!/bin/env sh

#######################################
# Removes swap and backup files and exits
# Globals:
#   SWAP
# Arguments:
#   None
# Returns:
#   None
#######################################
close_file() {
  test -f "${SWAP}" && rm "${SWAP}"
  test -f "${SWAP}".bkp && rm "${SWAP}".bkp
}

#######################################
# Appends line to a place in a file
# Globals:
#   SWAP
# Arguments:
#   Line
# Returns:
#   None
#######################################
append_to_line() {
  mv "${SWAP}" "${SWAP}".bkp

  if test "$1" = 0; then
    command cat >>"${SWAP}"
    cat "${SWAP}".bkp >>"${SWAP}"
  elif test -z "$1"; then
    cat "${SWAP}".bkp >>"${SWAP}"
    command cat >>"${SWAP}"
  else
    {
      sed -n "1,${1}p" "${SWAP}.bkp"
      command cat
      sed -n "$(($1 + 1)),\$p" "${SWAP}.bkp"
    } >>"${SWAP}"
  fi
}

#######################################
# Processes user commands
# Globals:
#   SWAP
# Arguments:
#   Command
#   Argument
# Returns:
#   None
#######################################
do_action() {

  case "$1" in

  # Printf
  p)
    if test -z "$2"; then
      cat -n "${SWAP}" && printf "EOF\\n"
    else
      sed -n "${2}p" "${SWAP}"
    fi
    ;;

  # Search
  /)
    if test -n "$2"; then
      grep -in "${2}" "${SWAP}"
    fi
    ;;

  # Change line
  c)
    sed -n "${2}p" "${SWAP}"
    append_to_line "${2}"
    sed -i "${2}d" "${SWAP}"
    ;;

  # Command-line commands
  !) "${2}" ;;

  # Appends after line n
  a) append_to_line "${2}" ;;

  # Deletes a line
  d) sed -i "${2}d" "${SWAP}" ;;

  # Saves the file
  w) cp "${SWAP}" "${FILE}" ;;

  # Saves and exits
  wq)
    cp "${SWAP}" "${FILE}"
    exit
    ;;

  # Undoes last change
  u) cp "${SWAP}.bkp" "${SWAP}" ;;

  # Edit another file
  e | q)
    close_file

    if test -n "$2"; then
      init "$2"
    else
      exit
    fi
    ;;

  # Shows path of current file
  f) echo "$(pwd)/$FILE" ;;

  *) printf "The %s command is unknown\\n" "$action" ;;
  esac
}

#######################################
# Initializes the swap and globals for the file
# Globals:
#   None
# Arguments:
#   File path
# Returns:
#   None
#######################################
init() {
  FILE="$1"

  SWAP="$1.swp"

  if test -f "$1"; then
    cp "$1" "${SWAP}"
  else
    touch "${SWAP}"
  fi
}

main() {
  # Disables Ctrl+C
  trap '' 2

  # If no file is given, exits
  test -z "$1" && exit

  init "$@"

  while true; do
    printf ":"
    read -r input

    # The action is the first word
    action=$(echo "$input" | cut -d ' ' -f 1)

    # If there is one word, make param empty
    if test "$(echo "$input" | wc -w)" = 1; then
      param=
    # If there is two words, get the 2nd
    elif test "$(echo "$input" | wc -w)" = 2; then
      param=$(echo "$input" | cut -d ' ' -f 2)
    # If there is more than two words, give an error
    else
      printf "Too many arguments\\n" && continue
    fi

    do_action "${action}" "${param}"
  done
}

main "$@"
